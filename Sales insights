# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m1ktS2z8ZlJBokp6Vd2sl2vJF8mqi6-E
"""

!pip install streamlit

!pip install opencv-python
!pip install pillow
!pip install db-sqlite3
!pip install pyngrok --upgrade

!pip install flask

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import requests
# 
# # Streamlit frontend
# 
# st.title("E-Commerce Site")
# 
# # User registration
# st.header("User Registration")
# first_name = st.text_input("First Name")
# last_name = st.text_input("Last Name")
# register_button = st.button("Register")
# 
# if register_button:
#     response = requests.post(
#         'http://localhost:5000/register',
#         json={'first_name': first_name, 'last_name': last_name}
#     )
#     st.write(response.json())
# 
# 
# # User login
# st.header("User Login")
# username = st.text_input("Username")
# password = st.text_input("Password", type="password")
# login_button = st.button("Login")
# 
# if login_button:
#     response = requests.post(
#         'http://localhost:5000/login',  # Update with your API endpoint
#         json={'username': username, 'password': password}
#     )
#     st.write(response.json())
# 
# # Product upload
# st.header("Product Upload")
# file = st.file_uploader("Upload CSV file")
# 
# upload_button = st.button("Upload")
# 
# if upload_button and file:
#     response = requests.post(
#         'http://localhost:5000/upload',  # Update with your API endpoint
#         files={'file': file}
#     )
#     st.write(response.json())
# 
# 
#

from flask import Flask, request, jsonify

app = Flask(__name__)

users = []
products = []

# User Registration
@app.route('/register', methods=['POST'])
def register():
    data = request.json
    first_name = data.get('first_name')
    last_name = data.get('last_name')
    users.append({'first_name': first_name, 'last_name': last_name})
    return jsonify({'message': 'Registration successful'})

# User Login
@app.route('/login', methods=['POST'])
def login():
    data = request.json
    username = data.get('username')
    password = data.get('password')


    if username == 'admin' and password == 'password':
        return jsonify({'message': 'Login successful'})
    else:
        return jsonify({'message': 'Login failed'})

# Product Upload
@app.route('/upload', methods=['POST'])
def upload():
    file = request.files['file']
    if file:

        return jsonify({'message': 'Product upload successful'})
if __name__ == '__main__':
    app.run(debug=True, port=5001)

!pip install Flask-SQLAlchemy

!pip install flask_marshmallow

from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///ecommerce.db'
db = SQLAlchemy(app)
ma = Marshmallow(app)

# Define the Product model
class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    barcode = db.Column(db.String(20), unique=True, nullable=False)
    brand = db.Column(db.String(50))
    description = db.Column(db.String(255))
    price = db.Column(db.Float, nullable=False)
    available = db.Column(db.Boolean, default=True)

# Create the database tables
with app.app_context():
    db.create_all()

# Define the Product schema
class ProductSchema(ma.SQLAlchemySchema):
    class Meta:
        model = Product

    id = ma.auto_field()
    name = ma.auto_field()
    barcode = ma.auto_field()
    brand = ma.auto_field()
    description = ma.auto_field()
    price = ma.auto_field()
    available = ma.auto_field()

product_schema = ProductSchema()
products_schema = ProductSchema(many=True)

# Create the database tables
# Create the database tables inside the app context
with app.app_context():
    db.create_all()

# Define the Product schema
class ProductSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = Product

product_schema = ProductSchema()
products_schema = ProductSchema(many=True)

# Scenario 1: Registration API
@app.route('/register', methods=['POST'])
def register():
    data = request.json
    first_name = data.get('first_name')
    last_name = data.get('last_name')
    users.append({'first_name': first_name, 'last_name': last_name})
    return jsonify({"message": "Registration successful"}), 201

# Scenario 2: Login API
@app.route('/login', methods=['POST'])
def login():
    data = request.json
    username = data.get('username')
    password = data.get('password')


    if username == 'admin' and password == 'password':
        return jsonify({'message': 'Login successful'})
    else:
        return jsonify({'message': 'Login failed'})
    return jsonify({"message": "Login successful"}), 200

# Scenario 3: Product Upload API (CSV file uploads)
@app.route('/upload', methods=['POST'])
def upload_csv():
    file = request.files['file']
    if file:


     return jsonify({"message": "CSV upload successful"}), 201

# Scenario 4: Product Review API
@app.route('/review/<int:product_id>', methods=['POST'])
def add_review(product_id):

    return jsonify({"message": "Review added successfully"}), 201

# Scenario 5: Product View Pagination API
@app.route('/products', methods=['GET'])
def get_products():

    products = Product.query.order_by(Product.name).paginate(per_page=10)
    return products_schema.jsonify(products.items)

if __name__ == '__main__':
    app.run(debug=True)

from google.colab import drive
drive.mount('/content/drive')

!ls

!ngrok authtoken 2RSYaDxS4EWqbhfXoNjf1Q5yIUD_6d7nZvZSWupeccbx47GKM

!ngrok

from pyngrok import ngrok
#!nohub streamlit run app.py
!streamlit run app.py&>/dev/null&
!pgrep streamlit

publ_url =ngrok.connect(8501)

publ_url
